version: '3'

services:
    malka:
      image: local/malka-consumer
      depends_on:
        kafka:
          condition: service_healthy
      environment:
        KAFKA_BROKERS: "kafka:19092"
        RUST_LOG: "malka_consumer=debug,rdkafka::consumer=trace"
        AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
        AWS_DEFAULT_REGION: "${AWS_DEFAULT_REGION}"

    zookeeper:
      image: zookeeper:3.4.9
      hostname: zookeeper
      ports:
          - "2181:2181"
      environment:
          ZOO_MY_ID: 1
          ZOO_PORT: 2181
          ZOO_SERVERS: server.1=zookeeper:2888:3888
      volumes:
          - zookeeper-data:/data
          - zookeeper-datalog:/datalog

    kafka:
        image: confluentinc/cp-kafka:5.3.4
        hostname: kafka
        ports:
            - "9092:9092"
        environment:
          KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
          KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
          KAFKA_BROKER_ID: 1
          KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        volumes:
            - kafka-data:/var/lib/kafka/data
        depends_on:
            - zookeeper
        healthcheck:
          test: |
            kafka-topics --create --if-not-exists --topic user.update --partitions 10 --replication-factor 1 --zookeeper zookeeper:2181 &&
            kafka-topics --create --if-not-exists --topic user.delete --partitions 10 --replication-factor 1 --zookeeper zookeeper:2181
          timeout: 20s
          retries: 10

volumes:
    zookeeper-data:
    zookeeper-datalog:
    kafka-data:
